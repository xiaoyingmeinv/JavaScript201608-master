学好数组常用方法，从4个方面学习：
1）功能；
2）是否对原数组造成影响/能否改变原数组
3）是否有返回值
4）是否有参数
1.数组常用的方法
1）增加，删除和替换 5个
    1.ary.push()
        功能：给数组末尾添加一项
        参数:要添加的新内容
        返回值：新数组的长度
        原数组发生改变;
    2.ary.pop()
        功能：删除数组最后一项
        参数：没有参数；
        返回值：被删除的内容
        原数组发生改变;
    3.ary.unshift();
        功能：给数组开头增加一项；
        参数：要添加的新内容；
        返回值：新数组的长度
        原数组发生改变;
    4.ary.shift()
        功能：删除数组第一项；
        参数：没有参数；
        返回值：被删除的内容
        原数组发生改变;
    5.splice
        splice(n,m)删除：
            从索引n开始，删除m个；
            返回值：被删除的内容以新数组的形式返回；
            原数组发生改变;
        splice(n,0,x)添加
            从索引n开始，删除0；把新内容x放在索引n的前面；
            返回值：[];
            原数组发生改变;
        splice(n,m,x)替换
            从索引n开始，删除m个，替换为x的新内容；
            返回值：被删除的内容以新数组的形式返回；
            原数组发生改变;
2）查找和克隆 2个
    slice(n,m) 查找
        从索引n开始，查找到索引m，但不包含m；
        返回值：找到的内容
        原数组不改变；
    //需求：找到[n项-m项]
    slice(n-1,m)
    concat 数组拼接
        返回值：拼接后的数组
        原数组不改变；
    数组克隆：
        ary.concat() 不传参数
        slice(0)/slice();
3）数组转字符串 2个
    toString()-》把数组转为字符串（把数组每一项以“,”拼接成的字符串）
        不传参数
        返回值：以“,”拼接成的字符串；
        原数组不发生改变；
    join('拼接形式')->把数组以各种形式拼接起来；拼接形式，就是我们传的参数；
        返回值：拼接好的字符串；
        原数组不发生改变；
    eval(str):把字符串做为JS代码来执行；字符串中如果有+,-,*,/他们就具有计算的功能；
    eval(ary.join('+'))
4)数组的排序和排列 2个
    reverse() 数组翻转
        没有参数
        返回值：翻转后的数组
        原数组发生改变；
    sort(function(a,b){
        return a-b;//实现从小到大排；
        //return b-a;//实现从大到小排
    })
        参数：是一个函数，并且，函数中也有两个参数；
        返回值：排序后的数组
        原数组发生改变；
5）数组常用但不兼容的方法；3个；
    indexOf() 查找数组中是否有某一项，找到：返回索引；找不到：-1；
    //item：数组中的每一项 index：索引 input：原数组
    forEach(function(item,index,input){

    })
    forEach功能：遍历数组；
    返回值：没有返回值；
    原数组没发生改变；

    map(function(item,index,input){

    })
    map的功能，及参数和forEach一样；
    但是，map有返回值；
 2）数组小总结
 删除数组最后一项：
    ary.pop()
    ary.length--;
    ary.length-=1; ary.length=ary.length-1;
    ary.splice(ary.length-1,1);
 给数组末尾添加一项
    ary.push();
    ary.splice(ary.length,0,'');
    ary[ary.length]='';
 3)数组的克隆
    slice()/slice(0)
    ary.concat()
    ary.splice(0)












