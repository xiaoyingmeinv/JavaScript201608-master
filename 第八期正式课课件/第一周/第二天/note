1.如何配置git
git config --global user.name "github的用户名"
git config --global user.email "github的邮箱"
2.检查自己的git是否安装成功？
git --version
3.如何把本地文件夹变成git仓库？--建立本地仓库
1)新建一个文件夹，打开文件
2）git Bash / shift+鼠标右键 在此处打开命令行
3）git init;
4.如何添加远程仓库？如何删除远程仓库-命令？
添加远程仓库：
1）在github上新建仓库
2）git remote add origin 自己的远程通道地址
如何查看：git remote -v
如何删除：git remote rm origin;
5.git工作流
1)git add ./-A/文件名+后缀
2）git commit -m"注释"
3)git push origin master;
6.学员更新老师讲义 or 更新你们自己的项目?
1)在自己的github上输入老师的github地址；
2）fork
3)git clone 自己的github上fork的地址
一定要进入文件夹后，再更新
4）连接老师的远程通道
git remote add teacher 老师github的远程地址
5）git remote update teacher 更新远程通道
git pull teacher master;
6)如何上传作业：
    1）先在本地仓库添加自己更新的内容
    2）检测下，该文件夹下，是否已经自动连接自己的远程仓库
    3）git add .
    git commit -m"注释"
    git push origin master
    4)在自己的github上发送请求： pull request
7)元素的动态操作:
1)动态创建
document.createElement(标签名)
obj.cloneNode(boolean) true:深度克隆； false/不写：只克隆表面
2）动态插入
parent.appendChild();
parent.insertBefore(newEle,oldEle)
3）删除和替换
parent.removeChild(curEle);
parent.replaceChild(newEle,oldEle);
8)去重思路有哪些？
    1. 双重循环
    2.sort排序后，拿当前项跟后一项比较，如果相等，用splice删除，同时，预防数组塌陷
    3.新数组： 检测数组中没有，才给数组中插入
    4.对象：对象中如果已经存在，通过数组删除（splcie删除），同时，预防数组塌陷
    5.对象：利用对象不重名的特性；记录了每个数字出现的次数
9）函数传参有哪些注意事项？
确定参数： 形参
不确定参数：arguments；
10）节点包含哪些类型？他们的nodeType,nodeValue,nodeName各是什么？
文本节点 3   #text   文本内容
注释节点 8   #comment 注释内容
元素节点 1   大写的标签名 null
document节点 #document null
11)字符串常用方法
1）通过索引找字符
charAt() charCodeAt()
2)通过字符找索引
indexOf() lastIndexOf()
3)字符串查找
substr(n,m) 从索引n开始，查找m个；
substring(n,m) 从索引n开始，找到索引m，不包含m；
slice(n,m) 他的功能跟substring一样，可以取负值
4）字符串转大小写：
toUpperCase()
toLowerCase()
5)
split(切割形式)
search() 匹配，找不到返回-1； 找到返回对应内容的索引
replace('','') 替换
match() 捕获，从大字符串中把要找的小字符串提取出来；
。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。
1.为什么学习预解释？
需求：点击任何一个按钮，让所有的按钮都变红；
1)在点击事件中，触发的函数形成一个私有作用域，在这个作用域中没有定义变量i，但是我们取到值，为什么？
2）加var和不加var的区别；
3）不要再条件判断语句中，写函数的定义阶段；
4）出错的时候知道为何出错？
2.什么是预解释？
在当前作用域下，在JS代码执行之前，浏览器会对带var和带function进行提前声明或定义；
3.作用域：全局作用域 和 私有作用域
全局作用域：当浏览器打开HTML页面的时候，会形成一个供JS代码执行的全局作用域(全局环境)，在这个全局作用域下，所有的全局变量，都属于window的全局属性；所有的全局函数，都属于window的全局方法；
4.声明和定义：
声明：告诉浏览器，有这么一个变量； 举例： var a;
定义：给已经声明过的变量赋值； eg: var a=123;
5.关于带var 和 带function在声明阶段是不同的；
带var的： 只声明，不定义；
带function的： 声明+定义；
6.函数定义和执行阶段：
定义3阶段：
    1）开辟一个空间地址
    2）把函数体中的所有JS代码做为字符串存在这个空间中
    3）把空间地址赋值给函数名
调用
    1）形成一个私有作用域
    2）给形参赋值
    3）预解释
    4）代码从上到下的执行；
7.作用域链：当函数执行的时候，会形成一个私有作用域；查看这个作用域中是否有私有变量A：
1）如果有，这个作用域中所有出现的A都属于私有变量，跟外界没有任何关系；
2）如果没有：
    1.获取阶段： 往上级作用域进行查找，找到直接弹出，找不到，继续往上级的上级找，。。。一直找到window还没有找到，报错； xx is not defined;
    2.设置阶段；往上级作用域进行查找，找到进行重新赋值，找不到，继续往上级的上级找，。。。一直找到window还没有找到，属于window的全局属性；
8.私有变量有两个
1）形参
2）带var的；
9.内存：栈内存，堆内存
栈内存：全局作用域和私有作用域
内存释放：
全局作用域释放：只有我们关闭浏览器打开的HTML页面，才能释放；
私有作用域释放：一般情况，当我们执行完函数的时候，他会自动释放；但特殊情况除外：
1）如果函数里面的东西被外面占用，就无法释放；
2)不立即释放：当函数执行完成的时候会返回一个函数，这个返回的函数还需要再执行一次；只有返回值执行完成后才能释放；
堆内存：
    对象数据类型：存的是对象的属性名和属性值
    函数数据类型：存的是代码字符串；
    var a={};
    a=null;
堆内存的释放：如果堆内存被变量占用，无法得到释放，只有把变量的指针指向一个空指针null；这样，当浏览器空闲的时候，会把指向空指针的变量自动收回；浏览器  的这种处理机制，叫做垃圾回收机制；
10.带var和不带var的区别：
带var：1）会进行预解释 2）window的全局属性（在全局环境下）
不带var：1）不会进行预解释 2）window的全局属性
11.预解释无节操：
1）只对等号左边带var的，进行只声明，不定义；
2）自执行函数不进行预解释，只有执行到他的时候，声明+定义+执行同步完成
3）条件判断语句中，无论条件是否成立，都会进行预解释；
注意：为了代码规范性，不要在条件判断语句中写函数定义阶段；因为预解释时各大浏览器不同；
4）已经声明过的变量，不会进行重复声明
5）return后面的返回值不会进行预解释，return下面的语句虽然不执行，但会进行预解释；
12.关于this的用法总结：
1）当元素的事件被触发，执行一个函数，函数中的this指向当前这个元素
2）当函数被调用的时候，看前面是否有点，点前面是谁，this就是谁；
3)自执行函数中的this，永远都是window；
13.什么是上级作用域？
上级作用域跟在哪里调用无关，只跟他对应的堆内存在哪里开辟（定义）有关；






